version: '3.8'

services:
  # Main fraud detection system
  fraud-detection:
    build: 
      context: .
      target: production
    container_name: fraud-detection-system
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
      - LOG_LEVEL=INFO
    volumes:
      - ./credentials:/app/credentials:ro
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8080:8080"  # Health check and metrics (FastAPI)
      - "8000:8000"  # Main API endpoints (FastAPI)
    networks:
      - fraud-detection-net
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: fraud-detection-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-frauddetection123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fraud-detection-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud-detection-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fraud-detection-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fraud-detection-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - fraud-detection-net
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with Fluent Bit
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: fraud-detection-logs
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs:ro
      - ./monitoring/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - fraud-detection-net
    depends_on:
      - fraud-detection

  # Development tools (comment out for production)
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: fraud-detection-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./models:/home/jovyan/work/models:ro
      - ./data:/home/jovyan/work/data:ro
    ports:
      - "8888:8888"
    networks:
      - fraud-detection-net
    profiles:
      - development

networks:
  fraud-detection-net:
    driver: bridge
    name: fraud-detection-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local